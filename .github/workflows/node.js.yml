name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: Agent-1
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: Agent-1
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Gitleaks Setup
        uses: gitleaks/gitleaks-action@v2

      - name: Gitleaks Scan
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

  owasp_dependency_check:
    runs-on: Agent-1
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install OWASP Dependency-Check
        run: |
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip -o dc.zip
          unzip -q dc.zip -d $HOME/dependency-check
          echo "$HOME/dependency-check/dependency-check/bin" >> $GITHUB_PATH
  
      - name: Run OWASP Dependency-Check on Node.js project
        run: |
          dependency-check.sh \
            --project "NodeJS App" \
            --scan ./client \
            --format "HTML" \
            --format "JSON" \
            --out ./dependency-check-report
  
      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ./dependency-check-report

  trivy_fs_scan:
    runs-on: Agent-1
    needs: owasp_dependency_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
    runs-on: Agent-1
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client        # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: Agent-1
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api           # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
  build_backend_image:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build backend image (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: false
          load: true
          tags: kumarakshay5/backend:latest
          file: ./api/Dockerfile

  scan_backend_image:
    runs-on: Agent-1
    needs: build_backend_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy scan (backend)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: kumarakshay5/backend:latest
          format: table
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  push_backend_image:
    runs-on: ubuntu-latest
    needs: scan_backend_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: kumarakshay5/backend:latest
          file: ./api/Dockerfile

  build_frontend_image:
    runs-on: ubuntu-latest
    needs: push_backend_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build frontend image (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: false
          load: true
          tags: kumarakshay5/frontend:latest
          file: ./client/Dockerfile

  scan_frontend_image:
    runs-on: Agent-1
    needs: build_frontend_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy scan (frontend)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: kumarakshay5/frontend:latest
          format: table
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  push_frontend_image:
    runs-on: ubuntu-latest
    needs: scan_frontend_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: kumarakshay5/frontend:latest
          file: ./client/Dockerfile

  deploy_to_kubernetes:
    runs-on: Agent-1
    needs: push_frontend_image
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s-prod/sc.yaml 
        kubectl apply -f k8s-prod/mysql.yaml 
        kubectl apply -f k8s-prod/backend.yaml 
        kubectl apply -f k8s-prod/frontend.yaml 
        kubectl apply -f k8s-prod/ci.yaml 
        kubectl apply -f k8s-prod/ingress.yaml

  owasp_zap_scan:
    runs-on: Agent-1
    needs: deploy_to_kubernetes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: "http://www.shreeradhaa.in"   # ðŸ‘ˆ replace with real ingress
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-zap-report
          path: zap-report.html
